// Code generated by mockery v2.36.0. DO NOT EDIT.

package ddd

import mock "github.com/stretchr/testify/mock"

// MockEventSubscriber is an autogenerated mock type for the EventSubscriber type
type MockEventSubscriber[T Event] struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *MockEventSubscriber[T]) Subscribe(_a0 EventHandler[T], _a1 ...string) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewMockEventSubscriber creates a new instance of MockEventSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventSubscriber[T Event](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventSubscriber[T] {
	mock := &MockEventSubscriber[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
